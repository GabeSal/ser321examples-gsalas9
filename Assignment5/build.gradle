plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'edu.distributed'
version = '1.0-SNAPSHOT'

sourceCompatibility = '21'
targetCompatibility = '21'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:4.28.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }
    generatedFilesBaseDir = "$projectDir/build/generated"
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "$buildDir/generated/source/proto/main/java"]
        }
        proto {
            srcDirs = ['src/main/proto']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

test {
    useJUnitPlatform()
}

application {
    // Default entry point (fallback)
    mainClass = 'distributed.Main'
}

def host = project.hasProperty('host') ? project.getProperty('host') : 'localhost'
def port = project.hasProperty('port') ? project.getProperty('port') : '8500'
def wrong = project.hasProperty('wrong') ? project.getProperty('wrong') : '0'

// CLI Tasks
tasks.register('runClient', JavaExec) {
    group = 'application'
    description = 'Runs the distributed Client'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('distributed.client.Client')
    args host, port
}

tasks.register('runLeader', JavaExec) {
    group = 'application'
    description = 'Runs the Leader node'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('distributed.leader.Leader')
    args port
}

tasks.register('runNode', JavaExec) {
    group = 'application'
    description = 'Runs a Node (worker)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('distributed.node.Node')
    args host, port, wrong
}
