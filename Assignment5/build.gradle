plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'edu.distributed'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:4.28.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:4.28.2'
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "$buildDir/generated/source/proto/main/java"]
        }
        proto {
            srcDirs = ['src/main/proto']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

test {
    useJUnitPlatform()
}

def host = project.hasProperty('host') ? project.getProperty('host') : 'localhost'
def clientPort = project.hasProperty('clientPort') ? project.getProperty('clientPort') : '8500'
def nodePort = project.hasProperty('nodePort') ? project.getProperty('nodePort') : '8600'
def delayMs = project.hasProperty('delayMs') ? project.getProperty('delayMs') : '50'
def wrong = project.hasProperty('wrong') ? project.getProperty('wrong') : '0'

// CLI Tasks
tasks.register('runClient', JavaExec) {
    group = 'application'
    description = 'Runs the distributed Client'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('distributed.Client')
    args host, clientPort, delayMs

    standardInput = System.in;
}

tasks.register('runLeader', JavaExec) {
    group = 'application'
    description = 'Runs the Leader node'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('distributed.Leader')
    args clientPort, nodePort   // example: 8500 for clients, 8600 for nodes
}

tasks.register('runNode', JavaExec) {
    group = 'application'
    description = 'Runs a Node (worker)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('distributed.Node')
    args host, nodePort, wrong
}